#include "xgpio.h"          // Provides access to PB GPIO driver.
#include <stdio.h>          // xil_printf and so forth.
#include "platform.h"       // Enables caching and other system stuff.
#include "mb_interface.h"   // provides the microblaze interrupt enables, etc.
#include "xintc_l.h"        // Provides handy macros for the interrupt controller.

#define ONE_SECOND_COUNT 100
#define SECONDS_BUTTON 0x02
#define MINS_BUTTON 0x01
#define HOURS_BUTTON 0x08
#define INCREMENT_BUTTON 0x10
#define DECREMENT_BUTTON 0x04
XGpio gpLED;  // This is a handle for the LED GPIO block.
XGpio gpPB;   // This is a handle for the push-button GPIO block.

static int hours = 0;
static int mins = 0;
static int seconds = 0;

static int debounceCounter = 0;
static u32 currentButtonState;
// This is invoked in response to a timer interrupt.
// It does 2 things: 1) debounce switches, and 2) advances the time.
void timer_interrupt_handler() {
	static int counter = 0;
	counter++;

	if(debounceCounter && (--debounceCounter == 0)){
		if(currentButtonState & (SECONDS_BUTTON | INCREMENT_BUTTON)){
			seconds++;
		}
		if(currentButtonState & (MINS_BUTTON | INCREMENT_BUTTON)){
			mins++;
		}
		if(currentButtonState & (HOURS_BUTTON | INCREMENT_BUTTON)){
			hours++;
		}
		if(currentButtonState & (SECONDS_BUTTON | DECREMENT_BUTTON)){

		}
		if(currentButtonState & (MINS_BUTTON | DECREMENT_BUTTON)){

		}
		if(currentButtonState & (HOURS_BUTTON | DECREMENT_BUTTON)){

		}
	}

	if(counter == ONE_SECOND_COUNT){
		seconds++;
		if(seconds > 59){
			seconds = 0;
			mins++;
		}
		if(mins > 59){
			mins = 0;
			hours++;
		}
		if(hours > 23){
			hours = 0;
		}

		xil_printf("%02d:%02d:%02d\r",hours,mins,seconds);
		counter = 0;
	}
}

void increment_seconds(int rollover){
	seconds++;
	if(seconds > 59){
		seconds = 0;
		if(rollover){
			increment_mins(rollover);
		}
	}

}

void increment_mins(int rollover){
	mins++;
	if(mins > 59){
		mins = 0;
		if(rollover){
			increment_hours();
		}
	}
}
void increment_hours(){
	hours++;
	if(hours > 23){
		hours = 0;
	}
}
// This is invoked each time there is a change in the button state (result of a push or a bounce).
void pb_interrupt_handler() {
  // Clear the GPIO interrupt.
  XGpio_InterruptGlobalDisable(&gpPB);                // Turn off all PB interrupts for now.
  currentButtonState = XGpio_DiscreteRead(&gpPB, 1);  // Get the current state of the buttons.
  // You need to do something here.
  debounceCounter = 5;

  XGpio_InterruptClear(&gpPB, 0xFFFFFFFF);            // Ack the PB interrupt.
  XGpio_InterruptGlobalEnable(&gpPB);                 // Re-enable PB interrupts.
}

// Main interrupt handler, queries the interrupt controller to see what peripheral
// fired the interrupt and then dispatches the corresponding interrupt handler.
// This routine acks the interrupt at the controller level but the peripheral
// interrupt must be ack'd by the dispatched interrupt handler.
// Question: Why is the timer_interrupt_handler() called after ack'ing the interrupt controller
// but pb_interrupt_handler() is called before ack'ing the interrupt controller?
void interrupt_handler_dispatcher(void* ptr) {
	int intc_status = XIntc_GetIntrStatus(XPAR_INTC_0_BASEADDR);
	// Check the FIT interrupt first.
	if (intc_status & XPAR_FIT_TIMER_0_INTERRUPT_MASK){
		XIntc_AckIntr(XPAR_INTC_0_BASEADDR, XPAR_FIT_TIMER_0_INTERRUPT_MASK);
		timer_interrupt_handler();
	}
	// Check the push buttons.
	if (intc_status & XPAR_PUSH_BUTTONS_5BITS_IP2INTC_IRPT_MASK){
		pb_interrupt_handler();
		XIntc_AckIntr(XPAR_INTC_0_BASEADDR, XPAR_PUSH_BUTTONS_5BITS_IP2INTC_IRPT_MASK);
	}
}

int main (void) {
    init_platform();
    // Initialize the GPIO peripherals.
    int success;
    print("hello world\n\r");
    success = XGpio_Initialize(&gpPB, XPAR_PUSH_BUTTONS_5BITS_DEVICE_ID);
    // Set the push button peripheral to be inputs.
    XGpio_SetDataDirection(&gpPB, 1, 0x0000001F);
    // Enable the global GPIO interrupt for push buttons.
    XGpio_InterruptGlobalEnable(&gpPB);
    // Enable all interrupts in the push button peripheral.
    XGpio_InterruptEnable(&gpPB, 0xFFFFFFFF);

    microblaze_register_handler(interrupt_handler_dispatcher, NULL);
    XIntc_EnableIntr(XPAR_INTC_0_BASEADDR,
    		(XPAR_FIT_TIMER_0_INTERRUPT_MASK | XPAR_PUSH_BUTTONS_5BITS_IP2INTC_IRPT_MASK));
    XIntc_MasterEnable(XPAR_INTC_0_BASEADDR);
    microblaze_enable_interrupts();

    while(1);  // Program never ends.

    cleanup_platform();

    return 0;
}
